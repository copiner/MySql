### MySQL数据类型
SQL通常用到的数据列98%都是简单数据类型，例如字符型、数值型、日期型。

#### 字符型数据
字符型数据可以使用定长或变长的字符串来实现，其不同点在于固定长度的字符串使用空格向右填充，
以保证占用同样的字节数，变长字符串不需要向右填充，并且所有的字节数可变。
当定义一个字符列时，必须指定该列能存放字符串的最大长度。例如：
需要存储最大长度不超过20个字符的字符串。
```
char(20) /*fixed-length*/
varchar(20) /*variable-length*/
```
char列可以设置的最大长度为255个字节，而varchar列最多可以存储65535个字节。如果需要存储更长字符串，
则需要使用文本类型，（mediumtext和longtext）。

`Oracle数据库对varchar的使用是个特例，使用varchar2类型表示变长字符串列`

##### 字符集
对于拉丁语系语言，比如英语，包含了一系列字母，其中每个字母只需要1个字节来存储。其他一些语言（如日语韩语）则包含了大量字符，每个字符的存储需要多个字节，因此这类字符集被称为多字符集。

MySQL可以使用各种字符集来存储数据，包含单字符集和多字符集，可以使用show命令来查看服务器所支持的字符集。
```
show character set
```
在安装MySQL服务器时，latin1字符集将会被自动选择默认字符集。当然，还可以为数据库中的每个字符列选择不同的字符集，甚至可以在同一个数据存储不同的字符集数据。为数据列指定非默认的字符集，只需要在类型定义后加上系统支持的字符集名称，例如：
```
varchar(20) character set utf8
```
在MySQL中，还可以改变整个数据库的默认字符集：
```
create database foreign_sales character set utf8
```

##### 文本数据
如果需要存储的数据超过64KB(varchar 列所能容许的上限），就需要使用文本类型。

MySQL文本类型
```
文本类型                                  Maxinum number of bytes

tinytext                                          255

text                                              65535

mediumtext                                        16777215

longtext                                          4294967295
```

当选择使用文本类型时，应注意下列事项：

* 如果被装载到文本列中的数据超出了该类型的最大长度，数据将会被截断。

* 在向文本列表装载数据时，不会消除数据的尾部空格。

* 当使用文本列排序或分组时，只会使用前1024个字节，当然在需要时可以放宽这个限制。

* 这些不同的文本类型只是针对MySQL服务器。SQLServer对于大的字符型数据只提供了text类型，而DB2和Oracle使用的数据类型名称为clob,即Character Large Object.

* 如今MySQL允许varchar列最大容纳65535个字节，这样一般不需要使用tinytext或text类型了。

如果创建的列用于存储自由格式的数据条目，比如用于储存客户与公司客服部门交互数据的notes列，那么一般使用varchar就足够了。不过如果需要存储文档，那就可以选择mediumtext或longtext类型。

提示：

`Oracle数据库中，char列能容纳2000字节，varchar2列能容纳4000个字节，而SQLServer中的char和varchar都能容纳8000个字节`

#### 数值型数据
尽管使用独立的数值数据类型`numeric`似乎更为合理，但实际上存在着几种不同的数值数据类型，它们反映了数字应用的不同方式，如下所述。

* 某列需要指示顾客订单是否已被发送，该列类型可以被设为Boolean，它的值为0表示否，为1表示是。

* 交易表中由系统自动生成的主键，该列数据由1开始，并每次自增1，可能会达到非常大的数字。

* 顾客电子购物篮的物品号，该列的值应当为正数，从1到200（假设200为购物篮所能容纳的最多物品数）。

* 电路板钻孔机的位置数据，高精度的科学和制造业数据往往需要精确到小数点后8位。

为了处理这些类型的数据，MySQL提供几种不同的数值数据类型，最常用的是用于存储所有整数的类型，在这些类型前面还可以加上unsigned关键字，以向服务器指明该列存储的数据大于等于0。

下面列出5种用于存储整数的类型：
```
类型           带符号的范围              无符号的范围
tinyint        -128~127                0~255
smallint       -32768~32767            0~65535
medinumint     -8388608~8388607        0~16777215
int            -2147483648~2147483647  0~4294967295

bigint         -9223372036854775808~   0~18446744073709551615
                9223372036854775807
```
当使用这些整数类型之一创建列时，MySQL将为存储数据分配合适大小的空间，从1个字节（tinyint）到8个字节(bigint)不等。因此在选择类型时，只需要确保能够容纳预期的最大数字即可，这样可以避免不必要的存储控件。

下面列出MySQL浮点类型
```
类型                  数值范围
float(p,s)           -3.402823466E+38 ~ -1.175494351E-38
                      1.175494351E-38 ~ 3.402823466E+38

double(p,s)          -1.17976931348623157E+308 ~ -2.2250738585072014E-308
                     2.2250738585072014E-308 ~ 1.17976931348623157E+308
```
当使用浮点类型时，可以指定其精度（小数点左边到右边所允许的数字总位数）和有效数（小数点右边所允许的数字位数），当然这不是必需的。这两个值由参数p和s指定。需要注意的是，如果数字位超过了该列所定义的精度或有效位，那么该列中存储的数据将会被四舍五入。例如，一个定义位float(4,2)的列存储4位数字，其中两位在小数点左边，两位在小数点右边。因此，如果向该列添加数据27.44和8.19是允许的。但17.8675将会被四舍五入为17.87，178.375则会产生一个错误。

和整数类型一样，浮点列也可以被定义为unsigned,但这里只是禁止列中存放负数，并没有改变该列所存储的范围。

#### 时间数据